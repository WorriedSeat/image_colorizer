
name: Docker Build & Compose on Code Push

on:
  push:
    paths:
      - 'code/**'  # Триггер только на изменения в ./code и подпапках
  workflow_dispatch:

  
jobs:
  build-and-test:
    runs-on: ubuntu-latest

    env:
      LOWERCASE_REPO: ${{ github.repository | toLowerCase() }}

    steps:
      # 1. Checkout репозитория
      - name: Checkout code
        uses: actions/checkout@v4

      # 2. Set up Docker Buildx (для multi-platform сборки, если нужно)
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      # 3. Login в GitHub Container Registry (для push образов)
      - name: Login to GHCR
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      # 4. Build и push образа для app
      - name: Build and push app image
        uses: docker/build-push-action@v6
        with:
          context: ./code/deployment/app
          push: true
          tags: |
            ${{ format('ghcr.io/{0}/app:{1}', env.LOWERCASE_REPO, github.sha) }}
            ${{ format('ghcr.io/{0}/app:latest', env.LOWERCASE_REPO) }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      # 5. Build и push образа для api
      - name: Build and push api image
        uses: docker/build-push-action@v6
        with:
          context: ./code/deployment/api
          push: true
          tags: |
            ${{ format('ghcr.io/{0}/api:{1}', env.LOWERCASE_REPO, github.sha) }}
            ${{ format('ghcr.io/{0}/api:latest', env.LOWERCASE_REPO) }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      # # 6. Set up Docker Compose
      # - name: Set up Docker Compose
      #   uses: docker/setup-compose-action@v3
      #   with:
      #     docker-compose-version: 'v2.29.1'  # Актуальная версия

      # 7. Запуск compose для теста (build + up, затем down)
      - name: Run Docker Compose for testing
        run: |
          cd code/deployment
          docker-compose pull
          docker-compose up -d
          # Ждём запуска (пример: 30 сек, подстрой под свои сервисы)
          sleep 30
          # Тест доступности (пример: curl на порты)
          docker run --rm --network container:myapp-container appropriate/curl -s --retry 5 http://localhost:5000 || echo "App test failed"
          docker run --rm --network container:myapi-container appropriate/curl -s --retry 5 http://localhost:8000 || echo "API test failed"
          # Остановка
          docker-compose down -v